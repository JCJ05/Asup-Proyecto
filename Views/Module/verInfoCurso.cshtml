@model Repaso_Net.Models.Curso
@using Microsoft.AspNetCore.Identity
@using System.Threading.Tasks
@inject SignInManager<Usuario> SignInManager
@inject UserManager<Usuario> UserManager


@{

    List<Module> modulos = new List<Module>();
    List<Seccion> secciones = new List<Seccion>();

    
    
    Usuario myidentity = await Task.Run(() => UserManager.GetUserAsync(User));
    var roles = await Task.Run(() => UserManager.GetRolesAsync(myidentity));

    var owner = ViewBag.isOwner;
    
    var idSeccion = ViewBag.idSeccion;
    modulos = ViewBag.modulos;
    secciones = ViewBag.secciones;
}

<head>
  
   <style>
       .pdf,.excel{
         width: 5%;
        }
        
       .word{
         width: 7%;
       }

   </style>

</head>

<div style="display: flex;" >
   
          <div class="col-4">

             <div class="card" >

                    <img src="data:image/png;base64,@Model.fileBase64" class="card-img-top" alt="...">
                    <div class="card-body">
                        <h5 class="card-title">@Model.nombre</h5>
                        <p class="card-text">Horario: @Model.horario</p>

                    @if(modulos.Count > 0){

                        <ul class="card-body list-group">
                              
                            @foreach(var item in modulos)
                            {
                                <li class="list-group-item"><a href="/Module/verInfoCurso/@Model.Id?idmodulo=@item.id">@item.nombre</a></li>
                            }

                        </ul>
                    }else {

                        <p class="card-text">No hay modulos asignados a este curso</p>
                    }

                    </div>

             </div>

       </div>

        <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="exampleModalLabel">New message</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            
                              <form enctype="multipart/form-data">
                                <div class="mb-3">
                                    <label for="titulo" class="col-form-label">Titulo :</label>
                                    <input type="text" class="form-control" id="titulo">
                                </div>
                                <div class="mb-3">
                                    <label for="subtitulo" class="col-form-label">Subtitulo:</label>
                                    <input type="text" class="form-control" id="subtitulo">
                                </div>
                           
                              <div class="mb-3">
                                   <label for="link" class="col-form-label">Link de la clase: </label>
                                    <input type="text" class="form-control" id="link">
                              </div>

                              <div class="mb-3">
                                    <label for="archivos" class="col-form-label">Archivos de la semana:</label>
                                    <input type="file" class="form-control" name="files[]" id="archivos">
                              </div>

                              <ul id="listaArchivos">

                              </ul>
                                     
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                            <button id="btnSubmit" type="submit" class="btn btn-primary">AÃ±adir Seccion</button>
                        </div>


                             </form>
                        
                        </div>
                       
                        </div>
                    </div>
              </div>
         
     

    <div style="background-color: gray; width: 100%;">

        <div style="padding: 10px;">

          @if(roles.Contains("profesor") && owner == true){

            <button type="button" class="btn btn-info" data-bs-toggle="modal" data-bs-target="#exampleModal" >Agregar una Seccion</button>
          
          }

          @foreach (var item in secciones)
          {
              
               <h3>@item.titulo</h3>
               <h5>@item.subtitulo</h5>
               <a style="text-decoration: none; color: black;" href="@item.linkClase">Link de la clase: @item.linkClase</a>
                <ul>

                      @foreach(var archivo in item.archivos)
                      {
                           @if(archivo.extension == "pdf"){
                                
                                <li style="list-style: none; color: black;">@Html.ActionLink( archivo.nombreArchivo , "DownLoadArchivo" , new { id=archivo.Id })  <img class="pdf" src="~/img/pdf.png" alt="fileword"></li>
                           }else if(archivo.extension == "docx"){
                                <li style="list-style: none; color: black;">@Html.ActionLink( archivo.nombreArchivo , "DownLoadArchivo" , new { id=archivo.Id })  <img class="word" src="~/img/word.png" alt="fileword"></li>
                           }else if(archivo.extension == "xlsx"){
                                <li style="list-style: none; color: black;">@Html.ActionLink( archivo.nombreArchivo , "DownLoadArchivo" , new { id=archivo.Id })  <img class="excel" src="~/img/excel.png" alt="fileword"></li>
                           }else if(archivo.extension == "png" || archivo.extension == "jpg" || archivo.extension == "jpeg"){
                                <li style="list-style: none; color: black;">@Html.ActionLink( archivo.nombreArchivo , "DownLoadArchivo" , new { id=archivo.Id })  <img class="word" src="~/img/png-icon.png" alt="fileword"></li>
                           }else{
                                <li style="list-style: none; color: black;">@Html.ActionLink( archivo.nombreArchivo , "DownLoadArchivo" , new { id=archivo.Id })  <img class="word" src="~/img/document.jpg" alt="fileword"></li>
                           }
                           
                           
                      }
                </ul>

                @if(roles.Contains("profesor") && owner == true){

                    <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#modalUpdate" data-bs-whatever="@item.Id">Editar Seccion</button>
                    <button type="button" class="btn btn-danger" onclick="eliminarSeccion(@item.Id)">Eliminar Seccion</button>
                  
                }

                 
                <hr />
              
          }

          </div>

    </div>

</div>

 
 <div class="modal fade" id="modalUpdate" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="exampleModalLabel"></h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            
                              <form enctype="multipart/form-data">
                                <div class="mb-3">
                                    <label for="tituloUpdate" class="col-form-label">Titulo :</label>
                                    <input type="text" class="form-control" id="tituloUpdate">
                                </div>
                                <div class="mb-3">
                                    <label for="subtituloUpdate" class="col-form-label">Subtitulo:</label>
                                    <input type="text" class="form-control" id="subtituloUpdate">
                                </div>
                           
                              <div class="mb-3">
                                   <label for="linkUpdate" class="col-form-label">Link de la clase: </label>
                                    <input type="text" class="form-control" id="linkUpdate">
                              </div>

                              <div class="mb-3">
                                    <input id="idSeccion" type="text" disabled  style="display: none;"/>
                              </div>

                              <div class="mb-3">
                                    <label for="archivosUpdate" class="col-form-label">Archivos de la semana:</label>
                                    <input type="file" class="form-control" name="files[]" id="archivosUpdate">
                              </div>

                              <ul id="listaArchivosUpdate">

                              </ul>
                                     
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                                    <button type="submit" id="btnUpdateSeccion" class="btn btn-primary">Actualizar Seccion</button>
                                </div>


                             </form>
                        
                        </div>
                       
                        </div>
                    </div>
              </div>


@section Scripts {

  <script text="text/javascript">

     const exampleModal = document.getElementById('exampleModal');
     const form = exampleModal.querySelector('form');
     const archivos = document.getElementById('archivos');

    
     let archivosFile = [];

     archivos.addEventListener('change', (e) => {
        
        console.log("entre");
        const listaArchivos = document.getElementById('listaArchivos');
        listaArchivos.innerHTML = '';

        var file = e.target.files[0];
        console.log(file);
         
         if(file == undefined){

             callForEachArchivos();
            
         }else{

        var name = file.name;
        console.log(archivosFile.length);
         
        const verdad = archivosFile.find((item) => {
        
             if(item.name == name){
                 console.log('ya existe');
                 return true;
             }
         });

        
        if(verdad){
             
             Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'El archivo que intentas subir ya existe!',
              })

        }else{
            archivosFile.push( file );
            console.log(archivosFile.length);
        }

    
         callForEachArchivos();
            
      }
       
    });

    const callForEachArchivos = () => {
         
          archivosFile.forEach(function(file) {
            var li = document.createElement('li');

            li.addEventListener('click', (e) => {
                 e.preventDefault();

                 Swal.fire({
                    title: 'Â¿Estas seguro que deseas eliminar el archivo?',
                    text: "No podras revertir esta accion!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Si, Eliminar!',
                    cancelButtonText: 'Cancelar'
                  }).then((result) => {
                    if (result.value) {
                     
                            
                        archivosFile = archivosFile.filter(item => {
                            return item.name != file.name;
                        });

                         li.remove();

                      Swal.fire(
                        'Eliminado!',
                        'El archivo ha sido eliminado.',
                        'success'
                      )
                    }
                  })

               

            });


            li.innerHTML = file.name;
            li.classList.add('list-group-item' , 'puntero');
    
            listaArchivos.appendChild(li);
        });

    }

     form.addEventListener('submit', (e) => {

        e.preventDefault();

        if(archivosFile.length == 0){
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'No has seleccionado ningun archivo!',
              })
        }else{

            const btnSubmit = document.getElementById('btnSubmit');
            btnSubmit.disabled = true;

            const titulo = document.getElementById('titulo').value;
            const subtitulo = document.getElementById('subtitulo').value;
            const link = document.getElementById('link').value;
            const cursoId = @Model.Id;
            const moduloId = @idSeccion;

            console.log(archivosFile);
        
            const formData = new FormData();
            formData.append('titulo', titulo);
            formData.append('subtitulo', subtitulo);
            formData.append('link', link);
            formData.append('cursoId', cursoId);
            formData.append('moduloId', moduloId);
        
            archivosFile.forEach(function(file) {
                formData.append('archivos', file);
            });
        
            Swal.fire({
                title: 'Enviando archivo a la base de datos',
                text: 'Espere por favor',
                onBeforeOpen: () => {
                Swal.showLoading()
                }
                })
                    
            fetch('/Module/saveArchivos' , {
                method: 'POST',
                body: formData
            })
            .then(res => res.json())
            .then(data => {
                const {mensaje} = data;
                if(mensaje){
                    Swal.fire({
                        icon: 'success',
                        title: 'Exito!',
                        text: 'Seccion agregada con exito!',
                    })
                    .then(() => {
                        window.location.href = `/Module/verInfoCurso/@Model.Id?idmodulo=@idSeccion`;
                    });
                }else{
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: 'Algo salio mal!',
                    })
                }
            })

        }
        
    });

     exampleModal.addEventListener('show.bs.modal',async event => {
              
            await logicalModal(event)
   
     })

       const logicalModal = async (event) => {
    
        const modalTitle = exampleModal.querySelector('.modal-title')
        modalTitle.textContent = "Formulario de la Seccion"

    }


      const agregarSeccion = () => {
               
          const valores = window.location.search;
          console.log(valores);

          const urlParams = new URLSearchParams(valores);
          var producto = urlParams.get('idmodulo');
           
          if(producto != null){

              console.log(producto)
              return producto;

          }else {

                return 0;
          }
      }

      function eliminarSeccion(id){

            const swalWithBootstrapButtons = Swal.mixin({
                customClass: {
                    confirmButton: 'btn btn-success',
                    cancelButton: 'btn btn-danger'
                },
                buttonsStyling: false
                })

                swalWithBootstrapButtons.fire({
                title: 'Estas seguro de eliminar ?',
                text: "Recuerda que una vez eliminado no se puede revertir!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Si , Eliminar!',
                cancelButtonText: 'No, cancelar!',
                reverseButtons: true
                }).then((result) => {
                if (result.isConfirmed) {

                    callApiEliminarSeccion(id);

                    swalWithBootstrapButtons.fire(
                    'Eliminado!',
                    'La seccion a sido eliminada',
                    'success'
                    ).then(() => {
                        window.location.href = `/Module/verInfoCurso/@Model.Id?idmodulo=@idSeccion`;
                    });

                } else if (
                    /* Read more about handling dismissals below */
                    result.dismiss === Swal.DismissReason.cancel
                ) {
                    swalWithBootstrapButtons.fire(
                    'Cancelado',
                    'La seccion no se eliminino :)',
                    'error'
                    )
                }
           })

         
      }

      const callApiEliminarSeccion = async (id) => {
        const url = `https://localhost:5001/Module/deleteSeccion?id=${id}`;
        const response = await fetch(url)
        const data = await response.json()
        console.log(data);
      }

  </script>

  <script src="/js/updateModal.js"></script>
    

}