@model List<Pago>

<head>

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">

  <meta charset="utf-8">
  <meta content="width=device-width, initial-scale=1.0" name="viewport">
  <style>
      :root {
    --color-green: #00a878;
    --color-red: #fe5e41;
    --color-button: #fdffff;
    --color-black: #000;
}
.switch-button {
    display: inline-block;
}
.switch-button .switch-button__checkbox {
    display: none;
}
.switch-button .switch-button__label {
    background-color: var(--color-red);
    width: 5rem;
    height: 3rem;
    border-radius: 3rem;
    display: inline-block;
    position: relative;
}
.switch-button .switch-button__label:before {
    transition: .2s;
    display: block;
    position: absolute;
    width: 3rem;
    height: 3rem;
    background-color: var(--color-button);
    content: '';
    border-radius: 50%;
    box-shadow: inset 0px 0px 0px 1px var(--color-black);
}
.switch-button .switch-button__checkbox:checked + .switch-button__label {
    background-color: var(--color-green);
}
.switch-button .switch-button__checkbox:checked + .switch-button__label:before {
    transform: translateX(2rem);
}
  </style>

  <title>ASUP</title>



</head>

@if(Model.Count == 0){

<div class="alert alert-danger" role="alert">
    
    <p class="text-center">No hay ningun pago pendiente por aprobar</p>

</div>

}


@if(Model.Count > 0){

<center><div><h1>ESTADO DE INSCRIPCIÓN</h1></div></center>
    <br>
    <br>
        
    <div class="container" style="min-height: 90vh; padding-top: 100px;">
        <div id="contenedor-tabla" class="table-responsive-md">
            <table class="table table-striped ">
                <thead class="thead-dark">
                    <tr>
                        <th>DNI</th>
                        <th>NOMBRES</th>
                        <th>APELLIDOS</th>
                        <th>CORREO</th>
                        <th>MONTO TOTAL</th>
                        <th>VOUCHER</th>
                        <th>ESTADO</th>
                        <th>Aprobar</th>
                        <th>Rechazar</th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var item in Model)
                {

                    <tr>
                        <td>@item.usuario.identificacion</td>
                        <td>@item.usuario.nombres</td>
                        <td>@item.usuario.apellidos</td>
                        <td>@item.usuario.Email</td>
                        <td>S./@item.monto</td>
                        <td><button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal" data-bs-whatever="@item.Id">Ver Voucher</button></td>
                        <td>@item.Status</td>
                        <td><button class="btn btn-success" onclick="aprobarPago(@item.Id);">Aprobar Pago</button></td>
                        <td><button class="btn btn-danger" onclick="desaprobarPago(@item.Id)">Rechazar Pago</button></td>

                    </tr>
                    
                }
                    
                  <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="exampleModalLabel">New message</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            
                            <div class="mb-3">
                                 
                                  <img class="img-thumbnail" id="imgVoucher" alt="voucher">
                                
                            </div>
                        
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                        </div>
                        </div>
                    </div>
              </div>


                </tbody>
            </table>
        </div>
    </div>
}

@section Scripts {
  
   <script text="text/javascript">
   
     const exampleModal = document.getElementById('exampleModal');

     exampleModal.addEventListener('show.bs.modal',async event => {
              
            await logicalModal(event)
   
     })

     async function aprobarPago(id) {

         Swal.fire({
            title: '¿Esta seguro de aprobar el pago?',
            text: "¡No podrás revertir esta acción!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Si, aprobar pago!'
          }).then((result) => {
            if (result.value) {

             const mensaje = callApiAprobarPago(id);

             if(mensaje != ""){

                 Swal.fire(
                '¡Pago Aprobado!',
                'El pago ha sido aprobado.',
                'success'
                 )

                 setTimeout(function(){

                    location.reload();

                 }, 3500);

              }else {
                      
                    Swal.fire(
                    '¡Error!',
                    'Hubo un error al aprobar el pago. Intente nuevamente.',
                    'error'
                    )
    
              }

             }

            
          })
     }

     async function desaprobarPago(id){

        Swal.fire({
            title: '¿Esta seguro de rechazar el pago?',
            text: "¡No podrás revertir esta acción!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Si, rechazar pago!'
          }).then((result) => {
            if (result.value) {

             const mensaje = callApiDesaprobarPago(id);

             if(mensaje != ""){

                 Swal.fire(
                '¡Pago Rechazado!',
                'El pago ha sido rechazado.',
                'success'
                 )

                 setTimeout(function(){

                    location.reload();

                 }, 3500);

              }else {
                      
                    Swal.fire(
                    '¡Error!',
                    'Hubo un error al rechazar el pago. Intente nuevamente.',
                    'error'
                    )
    
              }

             }

            
          })
     }

     const callApiDesaprobarPago = async(id) => {
  
       const url = `https://localhost:5001/Pago/desaprobarPago?id=${id}`
       let mensaje = "";
       const response = await fetch(url);
       console.log(response);
    
       if(response.status == 200){
           const data = await response.json();
            mensaje = data.status;
       }

         return mensaje;

     }

     const callApiAprobarPago = async(id) => {
    
         const url = `https://localhost:5001/Pago/aprobarPago?id=${id}`
         const response = await fetch(url);
         let mensaje = "";
          
          if(response.status == 200){
              
            const data = await response.json();
            mensaje = data.mensaje;

          }

          return mensaje;

     }

    const logicalModal = async (event) => {
    
        const button = event.relatedTarget
        const idPago = button.getAttribute('data-bs-whatever')

        const data = await callApiGetVoucher(idPago)
    
        const modalTitle = exampleModal.querySelector('.modal-title')
        const imagen = document.getElementById('imgVoucher');
        modalTitle.textContent = "Imagen del Voucher"

        imagen.src = `data:image/png;base64,${data.voucher}`;
        

    }

    const callApiGetVoucher = async (id) => {

        const url = `https://localhost:5001/Pago/getVoucher?id=${id}`
        const response = await fetch(url , {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        const data = await response.json()
        return data
    }
    
   
   </script>

}