@model List<Curso>
@using Microsoft.AspNetCore.Identity
@using System.Threading.Tasks
@inject SignInManager<Usuario> SignInManager
@inject UserManager<Usuario> UserManager

@{   
    Layout = "_Layout";
    ViewData["Title"] = "LISTA DE CURSOS";
    
}


<div class="container mt-5">

 <h1 class="text-center">@ViewData["Title"]</h1>

 @if(SignInManager.IsSignedIn(User)){

    Usuario myidentity = await Task.Run(() => UserManager.GetUserAsync(User));
    var roles = await Task.Run(() => UserManager.GetRolesAsync(myidentity));

    if(roles.Contains("administrador")){
        <div class="mt-3">
   
          <a class="btn btn-warning" asp-controller="Curso" asp-action="RegistrarCurso">Nuevo Curso</a>

        </div>
    }

 
 }

  <h3>Filtros:</h3>

  <div class="container mb-5">
    
      <div style="display: flex; justify-content: space-between;">

           <div>

                <label>Curso: </label>
                <input type="text" class="form-control" id="nombre" placeholder="Nombre del curso">

           </div>

              <div>
    
                 <label>Desde: </label>
                 <input type="date" class="form-control" id="fecha">

              </div>

               <div>
    
                 <label>Precio: </label>
                 <input type="number" step="2.5" class="form-control" id="precio">

              </div>

      </div>

  </div>

  


   <div id="cartas" class="row">
    @foreach (var item in Model)
    {
    <div class="col-4" style="">

        <div class="card" style="width: 18rem;">
            <img src="data:image/png;base64,@item.fileBase64" class="card-img-top" alt="...">
            <div class="card-body">
                <h5 class="card-title">@item.nombre</h5>
                <p class="card-text">@item.informacion</p>
                <a asp-controller="Curso"  asp-action="VerCurso"  class="btn btn-primary" asp-route-id="@item.Id">Detalle</a>
                <a  class="btn btn-success" onclick="verId(@item.Id);">Agregar al Carrito</a>
               @if(SignInManager.IsSignedIn(User)){

                    Usuario myidentity = await Task.Run(() => UserManager.GetUserAsync(User));
                    var roles = await Task.Run(() => UserManager.GetRolesAsync(myidentity));

                   if(roles.Contains("administrador")){
                      <a class="btn btn-info" asp-controller="Curso" asp-action="EditarCurso" asp-route-id="@item.Id">Editar</a>
                      <a class="btn btn-danger" onclick="callApiEliminarCurso(@item.Id);" >Eliminar</a>  
                   }

                
                }
                
            </div>
        </div>

    </div>
    }
</div>


@section Scripts {

    <script text="text/javascript">
      
       const nombre = document.getElementById("nombre");
       const fecha = document.getElementById("fecha");
       const precio = document.getElementById("precio");
       const cursos = new Array();

       nombre.addEventListener('keyup' , (e) => {
            
             callApi();
       })

       precio.addEventListener('keyup' , (e) => {
            
             callApi();

       });

       fecha.addEventListener('change' , (e) => {
                
            callApi();
    
      });

     const callApi = () => {
          
        
            const data = {
                nombre: nombre.value? nombre.value : 'null',
                fecha: fecha.value? fecha.value : 'no',
                precio: precio.value? precio.value : 0
            }

            console.log(data);

            const url = `https://localhost:5001/api/filtro?nombre=${data.nombre}&fecha=${data.fecha}&precio=${data.precio}`;

            console.log(url);
    
            fetch(url, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                
                const {cursosFiltro} = data;
                console.log(cursosFiltro);
                mostrarCursos(cursosFiltro);
            })
            .catch(error => console.error('Error:', error));

     }
   
     const mostrarCursos = (data = []) => {
            let cards = '';
            const cartas = document.getElementById('cartas');

            cartas.innerHTML = '';

            if(data.length > 0){

            data.forEach(curso => {

                console.log(curso);
                
                const card = `
                  
                  <div class="col-4" style="">

                 <div class="card" style="width: 18rem;">
                 <img src="data:image/png;base64,${curso.fileBase64}" class="card-img-top" alt="...">
                 <div class="card-body">
                <h5 class="card-title">${curso.nombre}</h5>
                <p class="card-text">${curso.informacion}</p>
                <a class="btn btn-primary" href='VerCurso/${curso.id}'>Detalle</a>
                <a class="btn btn-success" onclick="verId(${curso.id});" >Agregar al Carrito</a>
                @if(SignInManager.IsSignedIn(User)){

                    Usuario myidentity = await Task.Run(() => UserManager.GetUserAsync(User));
                    var roles = await Task.Run(() => UserManager.GetRolesAsync(myidentity));

                   if(roles.Contains("administrador")){
                      <a class="btn btn-info" href='EditarCurso/${curso.id}'>Editar</a>
                      <a class="btn btn-danger" href='EliminarCurso/${curso.id}' >Eliminar</a>  
                   }

                
                }
                
            </div>
        </div>

    </div>
                
                
                `

                cards += card;


            })

            cartas.innerHTML = cards;
            
            }else{

                cartas.innerHTML = `<div class="alert alert-danger text-center">No hay cursos con los filtros que buscaste</div>`;
            }

     }

     function callApiEliminarCurso(id){

         console.log(id);
          
          Swal.fire({
            title: 'Estas seguro de eliminar?',
            text: "Esta accion no se puede revertir!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Si eliminar!'
            }).then((result) => {
            if (result.isConfirmed) {
                
                callApiEliminr(id);

            }
         })

     }

     const callApiEliminr = async(id) => {
          
          console.log(id);
          const url = `https://localhost:5001/Curso/eliminarCurso?id=${id}`;
          const response = await fetch(url)
          const data = await response.json()
        
          const {mensaje} = data;
          
          if(mensaje == 'Curso eliminado con Exito'){
              
               Swal.fire({
                title: 'Eliminado!',
                text: mensaje,
                icon: 'success',
                confirmButtonText: 'Ok'
               })

               window.location.href = '/Curso/ListarCursos';

          }else {

              Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: mensaje,
            })
          }

          return mensaje;

     }

    </script>

}
          
         

